import requests
import json
import telebot
from telebot import types
import yaml


class S19(telebot.TeleBot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ json –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ"""
    def __init__(self, token, url):
        super().__init__(token)

        try:
            with open('auth.json', encoding='utf8') as file:
                self.headers = json.load(file)
        except:
            print("Account information is missing")

    def full_stats(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è json —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –Ω–∞—Å –¥–∞–Ω–Ω—ã—Ö"""
        return requests.get(f'http://{url}/cgi-bin/stats.cgi', headers=self.headers).json()

    def start(self, message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        name = message.from_user.first_name, message.from_user.last_name

        if name[1] is None:
            name = message.from_user.first_name

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        funs = types.KeyboardButton('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ª–µ—Ä–æ–≤')
        chip = types.KeyboardButton('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á–∏–ø–æ–≤')
        plats = types.KeyboardButton('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞—Ç')
        markup.add(funs, chip, plats)
        self.send_message(message.from_user.id, f"üëã –ü—Ä–∏–≤–µ—Ç, {name} ! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Å–∏–∫—É!",
                          reply_markup=markup)

    def stats_chp_pcb(self, message):
        """–ß–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ full_stats –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è"""
        if message.text == '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ª–µ—Ä–æ–≤':
            self.send_message(message.from_user.id,
                              f'–û–±–æ—Ä–æ—Ç—ã –∫—É–ª–ª–µ—Ä–æ–≤/–º–∏–Ω : {self.full_stats().get("STATS")[0].get("fan")}')

        if message.text == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á–∏–ø–æ–≤':
            for i in range(0, 3):
                self.send_message(message.from_user.id,
                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á–∏–ø–æ–≤ –Ω–∞ {i + 1}-–π –ø–ª–∞—Ç–µ : {self.full_stats().get("STATS")[0].get("chain")[i].get("temp_chip")}')

        if message.text == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞—Ç':
            for i in range(0, 3):
                self.send_message(message.from_user.id,
                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {i + 1}-–π –ø–ª–∞—Ç—ã : {self.full_stats().get("STATS")[0].get("chain")[i].get("temp_pcb")}')


with open('config.yaml', 'r', encoding='utf8') as config:
    cfg = yaml.load(config, Loader=yaml.FullLoader)

token = cfg.get('token')
url = cfg.get('url')

s = S19(token, url)


@s.message_handler(commands=['start'])  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def start(message):
    s.start(message)


@s.message_handler(content_types=['text']) # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def stats_chp_pcb(message):
    s.stats_chp_pcb(message)


s.polling(none_stop=True, interval=0)
